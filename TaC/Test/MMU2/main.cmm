#include "util.h"

void putSIO(char c) {                       // SIO への出力
  while((in(0x0a) & 0x80)==0)
    ;
  out(0x08, ord(c));
}

// 1文字表示ルーチン
void putch(char c) {                 // SIO へ出力する
  if (c=='\n') putSIO('\r');
  putSIO(c);
}

// 文字列出力
void putstr(char[] str) {
  for (int i=0; str[i]!='\0'; i=i+1)
    putch(str[i]);
}

// １文字文字入力ルーチン
char getch() {
  while((in(0x0a) & 0x40)==0)
    ;
  return chr(in(0x08));
}

// 16進数出力
char[] hstr = "0123456789abcdef";
void puthex(int x) {
  putch(hstr[(x>>12)&0x000f]);
  putch(hstr[(x>>8 )&0x000f]);
  putch(hstr[(x>>4 )&0x000f]);
  putch(hstr[(x    )&0x000f]);
}

interrupt int0() { putstr("\n0\n"); halt(); } 
interrupt int1() { putstr("\n1\n"); halt(); }
interrupt int2() { putstr("\n2\n"); halt(); }
interrupt int3() { putstr("\n3\n"); halt(); }
interrupt int4() { putstr("\n4\n"); halt(); }
interrupt int5() { putstr("\n5\n"); halt(); }
interrupt int6() { putstr("\n6\n"); halt(); }
interrupt int7() { putstr("\n7\n"); halt(); }
interrupt int8() { putstr("\n8\n"); halt(); }
interrupt int9() { putstr("\n9\n"); halt(); }
interrupt intA() { putstr("\nA\n"); halt(); }
interrupt intB() { putstr("\nB\n"); halt(); }
interrupt intC() { putstr("\nC\n"); halt(); }
interrupt intD() { putstr("\nD\n"); halt(); }
interrupt intE() { putstr("\nE\n"); halt(); }
interrupt intF() { putstr("\nF\n"); halt(); }

#define PTBL 0xa0

public void main() {
  int[] Vector = _ItoA(0xffe0);
  Vector[0] = addrof(int0);
  Vector[1] = addrof(int1);
  Vector[2] = addrof(int2);
  Vector[3] = addrof(int3);
  Vector[4] = addrof(int4);
  Vector[5] = addrof(int5);
  Vector[6] = addrof(int6);
  Vector[7] = addrof(int7);
  Vector[8] = addrof(int8);
  Vector[9] = addrof(int9);
  Vector[10]= addrof(intA);
  Vector[11]= addrof(intB);
  Vector[12]= addrof(intC);
  Vector[13]= addrof(intD);
  Vector[14]= addrof(intE);
  Vector[15]= addrof(intF);

  // フレーム初期化(NO命令で埋める)
  int[] Mem = _ItoA(0x8000);
  for (int i=0; i<0x0100; i=i+1) {
     Mem[i] = 0x0000;
  }
  Mem[0] = 0x0a00; Mem[1] = 0x1234;     // ld g0,#0x1234
  Mem[2] = 0x1000; Mem[3] = 0x00f0;     // st g0,0x00f0
  Mem[4] = 0xa0f0; Mem[5] = 0x0008;     // jmp .
    // jmp 

  // ページテーブルの初期化
  Mem = _ItoA(PTBL<<8);
  for (int i=0; i<0x0100; i=i+1) {
    Mem[i] = 0x0000;
  }
  Mem[0] = 0x8780;     // V**R DRWX ffff ffff = 1000 0111 1000 0000
  Mem[1] = 0x8781;     // V**R DRWX ffff ffff = 1000 0111 1000 0001
  Mem[2] = 0x8782;     // V**R DRWX ffff ffff = 1000 0111 1000 0010
  Mem[3] = 0x8783;     // V**R DRWX ffff ffff = 1000 0111 1000 0011
  Mem[4] = 0x8784;     // V**R DRWX ffff ffff = 1000 0111 1000 0100
  Mem[5] = 0x8785;     // V**R DRWX ffff ffff = 1000 0111 1000 0101
  Mem[6] = 0x8786;     // V**R DRWX ffff ffff = 1000 0111 1000 0110
  Mem[7] = 0x8787;     // V**R DRWX ffff ffff = 1000 0111 1000 0111
  Mem[255] = 0x87ff;   // V**R DRWX ffff ffff = 1000 0111 1111 1111
  out(0xa6, PTBL);     // ページテーブルレジスタへの出力
  out(0xa2, 0x0001);   // MMU 有効化

  // ユーザモードで実行開始
  setJmp(0x0000, 0x0080);
}
